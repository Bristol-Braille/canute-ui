#!/usr/bin/env python3
import os
from frozendict import frozendict
from functools import partial
import time
import shutil
import logging
import asyncio
import aioredux
import aioredux.middleware

from ui.driver_pi import Pi
import ui.utility as utility
import ui.argparser as argparser
import ui.config_loader as config_loader
from ui.setup_logs import setup_logs
from ui.store import main_reducer
from ui.actions import actions
import ui.initial_state as initial_state
import ui.library.handlers as library
import ui.buttons as buttons
from ui.display import Display

display = Display()


log = logging.getLogger(__name__)


def main():
    args = argparser.parser.parse_args()
    config = config_loader.load()
    log = setup_logs(config, args.loglevel)
    timeout = config.get('comms', 'timeout')

    if args.emulated and not args.both:
        log.info('running with emulated hardware')
        from ui.driver_emulated import Emulated
        with Emulated(delay=args.delay, display_text=args.text) as driver:
            run(driver, config)
    elif args.emulated and args.both:
        log.info('running with both emulated and real hardware on port %s'
                 % args.tty)
        from ui.driver_both import DriverBoth
        with DriverBoth(port=args.tty, pi_buttons=args.pi_buttons,
                        delay=args.delay, display_text=args.text,
                        timeout=timeout) as driver:
            run(driver, config)
    else:
        log.info('running with real hardware on port %s, timeout %s' %
                 (args.tty, timeout))
        with Pi(port=args.tty,
                pi_buttons=args.pi_buttons,
                timeout=timeout) as driver:
            run(driver, config)


def run(driver, config):
    asyncio.get_event_loop().run_until_complete(run_async(driver, config))


@asyncio.coroutine
def run_async(driver, config):

    state = initial_state.read()
    width, height = driver.get_dimensions()
    state = state.copy(app=state['app'].copy(
        display=frozendict({'width': width, 'height': height})))

    thunk_middleware = aioredux.middleware.thunk_middleware
    create_store = aioredux.apply_middleware(
        thunk_middleware)(aioredux.create_store)
    store = yield from create_store(main_reducer, state)

    library_dir = config.get('files', 'library_dir')
    yield from library.sync(state['app'], library_dir, store)

    store.subscribe(partial(handle_changes, driver, config, store))

    # if we startup and update_ui is still 'in progress' then we are using the
    # old state file and update has failed
    if state['app']['update_ui'] == 'in progress':
        yield from store.dispatch(actions.update_ui('failed'))

    # since handle_changes subscription happens after init and library.sync it
    # may not have triggered. so we trigger it here. if we put it before init
    # it will start of by rendering a possibly invalid state. library.sync
    # won't dispatch if the library is already in sync so there would be no
    # guarantee of the subscription triggering if subscribed before that.
    yield from store.dispatch(actions.trigger())

    while 1:
        state = store.state
        if (yield from handle_hardware(driver, state, store)):
            break
        yield from buttons.check(driver, state, store)
        yield from display.send_line(driver)


def handle_changes(driver, config, store):
    state = store.state
    display.render_to_buffer(state['app'])
    ioloop = asyncio.new_event_loop()
    ioloop.run_until_complete(change_files(config, state['app'], store))
    initial_state.write(state)


@asyncio.coroutine
def change_files(config, state, store):
    if state['replacing_library'] == 'start':
        yield from store.dispatch(actions.replace_library('in progress'))
        yield from library.replace(config, state, store)
        yield from store.dispatch(actions.replace_library('done'))
    if state['backing_up_log'] == 'start':
        yield from store.dispatch(actions.backup_log('in progress'))
        backup_log(config)
        yield from store.dispatch(actions.backup_log('done'))
    if state['update_ui'] == 'start':
        log.info('update ui = start')
        if utility.find_ui_update(config):
            yield from store.dispatch(actions.update_ui('in progress'))
        else:
            log.info('update not found')
            yield from store.dispatch(actions.update_ui('failed'))


@asyncio.coroutine
def handle_hardware(driver, state, store):
    if not driver.is_ok():
        log.debug('shutting down due to GUI closed')
        initial_state.write(state)
        yield from store.dispatch(actions.shutdown())
    if state['app']['shutting_down']:
        if isinstance(driver, Pi):
            driver.clear_page()
            driver.lower_rods()
            os.system('sudo shutdown -h now')
        return True
    elif state['hardware']['resetting_display'] == 'start':
        store.dispatch(actions.reset_display('in progress'))
        driver.reset_display()
        display.hardware_state = []
        yield from store.dispatch(actions.reset_display('done'))
    elif state['hardware']['warming_up'] == 'start':
        store.dispatch(actions.warm_up('in progress'))
        driver.warm_up()
        yield from store.dispatch(actions.warm_up(False))


def backup_log(config):
    usb_dir = config.get('files', 'usb_dir')
    log_file = config.get('files', 'log_file')
    # make a filename based on the date
    backup_file = os.path.join(usb_dir, time.strftime('%Y%m%d_log.txt'))
    log.warning('backing up log to USB stick: {}'.format(backup_file))
    try:
        shutil.copyfile(log_file, backup_file)
    except IOError as e:
        log.warning("couldn't backup log file: {}".format(e))


if __name__ == '__main__':
    main()
